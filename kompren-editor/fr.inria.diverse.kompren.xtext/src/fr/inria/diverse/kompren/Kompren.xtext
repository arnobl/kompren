grammar fr.inria.diverse.kompren.Kompren with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kompren/fr.inria.diverse.kompren" 

Slicer returns Slicer: 'slicer' (active?='active')? (strict?='strict')? name=QName '{'
		(('domain' ':' uriMetamodel+=STRING)+ &
		('input' ':' inputClasses+=[ecore::EClass|QName] ( "," inputClasses+=[ecore::EClass|QName])*) &
		('radius' ':' radius=Radius)? &
		(('slicedClass' ':' slicedElements+=SlicedClass) |
		('slicedProperty' ':' slicedElements+=SlicedProperty))* &
		('onStart' onStart=CODE_BLOCK)? &
		('onEnd' onEnd=CODE_BLOCK)? &
		('helper' helper=CODE_BLOCK)?)
	'}';

terminal IDKOMPREN : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

QName returns ecore::EString: IDKOMPREN ('.' IDKOMPREN)*;

EBoolean returns ecore::EBoolean: 'true' | 'false';

terminal CODE_BLOCK : '[[' -> ']]';

Constraint returns Constraint: name=IDKOMPREN expression=CODE_BLOCK;

Radius returns Radius: {Radius} (focusedClasses+=[SlicedClass|QName] ( "," focusedClasses+=[SlicedClass|QName])* )?;

SlicedClass returns SlicedClass: domain=[ecore::EClass|QName] (isOption?='option')? (ctx=VarDecl)? 
	(expression=CODE_BLOCK)? ('constraint' ':' constraints+=Constraint)*;

VarDecl returns VarDecl: varName=IDKOMPREN;

SlicedProperty returns SlicedProperty:
	domain=[ecore::EStructuralFeature|QName] (isOption?='option')? (opposite=OppositeCreation)? (src=VarDecl tgt=VarDecl)?
		 (expression=CODE_BLOCK)? ('constraint' ':' constraints+=Constraint)*;

OppositeCreation returns OppositeCreation: {OppositeCreation} 'opposite' '(' name=IDKOMPREN ')';
