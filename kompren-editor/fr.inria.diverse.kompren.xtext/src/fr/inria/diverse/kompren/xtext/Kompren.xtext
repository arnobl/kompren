grammar fr.inria.diverse.kompren.Kompren with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://kompren/fr.inria.diverse.kompren" 

Slicer returns Slicer: 'slicer' (active?='active')? (strict?='strict')? name=EString '{'
		'domain' ':' uriMetamodel=EString
		'input' ':' inputClasses+=[ecore::EClass|EString] ( "," inputClasses+=[ecore::EClass|EString])*
		('radius' ':' radius=Radius)?
		('constraint' ':' constraints+=Constraint)*
		('slicedClass' ':' slicedElements+=SlicedClass)*
		('slicedProperty' ':' slicedElements+=SlicedProperty)*
		('onStart' '[[' onStart=EString ']]')?
		('onEnd' '[[' onEnd=EString ']]')?
		('helper' '[[' helper=EString ']]')?
	'}';

EString returns ecore::EString: STRING | ID;

EBoolean returns ecore::EBoolean: 'true' | 'false';

Constraint returns Constraint: name=EString '[[' expression=EString ']]';

Radius returns Radius: {Radius} (focusedClasses+=[SlicedClass|EString] ( "," focusedClasses+=[SlicedClass|EString])* )?;

SlicedClass returns SlicedClass: domain=[ecore::EClass|EString] (isOption?='option')? (ctx=VarDecl)? ('[[' expression=EString ']]')?;

VarDecl returns VarDecl: varName=EString;
//		'type' type=[ecore::EClass]

SlicedProperty returns SlicedProperty:
	domain=[ecore::EStructuralFeature|EString] (isOption?='option')? (src=VarDecl)? (tgt=VarDecl)?
		(opposite=OppositeCreation)? ('[[' expression=EString ']]')?;

OppositeCreation returns OppositeCreation: {OppositeCreation} 'opposite' '(' name=EString ')';
