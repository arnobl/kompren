/*
* generated by Xtext
*/
package fr.inria.diverse.kompren.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.inria.diverse.kompren.services.KomprenGrammarAccess;

public class KomprenParser extends AbstractContentAssistParser {
	
	@Inject
	private KomprenGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.inria.diverse.kompren.ui.contentassist.antlr.internal.InternalKomprenParser createParser() {
		fr.inria.diverse.kompren.ui.contentassist.antlr.internal.InternalKomprenParser result = new fr.inria.diverse.kompren.ui.contentassist.antlr.internal.InternalKomprenParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getSlicerAccess().getGroup(), "rule__Slicer__Group__0");
					put(grammarAccess.getSlicerAccess().getGroup_11(), "rule__Slicer__Group_11__0");
					put(grammarAccess.getSlicerAccess().getGroup_12(), "rule__Slicer__Group_12__0");
					put(grammarAccess.getSlicerAccess().getGroup_13(), "rule__Slicer__Group_13__0");
					put(grammarAccess.getSlicerAccess().getGroup_14(), "rule__Slicer__Group_14__0");
					put(grammarAccess.getSlicerAccess().getGroup_15(), "rule__Slicer__Group_15__0");
					put(grammarAccess.getSlicerAccess().getGroup_16(), "rule__Slicer__Group_16__0");
					put(grammarAccess.getSlicerAccess().getGroup_17(), "rule__Slicer__Group_17__0");
					put(grammarAccess.getSlicerAccess().getGroup_18(), "rule__Slicer__Group_18__0");
					put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
					put(grammarAccess.getRadiusAccess().getGroup(), "rule__Radius__Group__0");
					put(grammarAccess.getRadiusAccess().getGroup_1(), "rule__Radius__Group_1__0");
					put(grammarAccess.getRadiusAccess().getGroup_1_1(), "rule__Radius__Group_1_1__0");
					put(grammarAccess.getSlicedClassAccess().getGroup(), "rule__SlicedClass__Group__0");
					put(grammarAccess.getSlicedClassAccess().getGroup_3(), "rule__SlicedClass__Group_3__0");
					put(grammarAccess.getSlicedPropertyAccess().getGroup(), "rule__SlicedProperty__Group__0");
					put(grammarAccess.getSlicedPropertyAccess().getGroup_5(), "rule__SlicedProperty__Group_5__0");
					put(grammarAccess.getOppositeCreationAccess().getGroup(), "rule__OppositeCreation__Group__0");
					put(grammarAccess.getSlicerAccess().getActiveAssignment_1(), "rule__Slicer__ActiveAssignment_1");
					put(grammarAccess.getSlicerAccess().getStrictAssignment_2(), "rule__Slicer__StrictAssignment_2");
					put(grammarAccess.getSlicerAccess().getNameAssignment_3(), "rule__Slicer__NameAssignment_3");
					put(grammarAccess.getSlicerAccess().getUriMetamodelAssignment_7(), "rule__Slicer__UriMetamodelAssignment_7");
					put(grammarAccess.getSlicerAccess().getInputClassesAssignment_10(), "rule__Slicer__InputClassesAssignment_10");
					put(grammarAccess.getSlicerAccess().getInputClassesAssignment_11_1(), "rule__Slicer__InputClassesAssignment_11_1");
					put(grammarAccess.getSlicerAccess().getRadiusAssignment_12_2(), "rule__Slicer__RadiusAssignment_12_2");
					put(grammarAccess.getSlicerAccess().getConstraintsAssignment_13_2(), "rule__Slicer__ConstraintsAssignment_13_2");
					put(grammarAccess.getSlicerAccess().getSlicedElementsAssignment_14_2(), "rule__Slicer__SlicedElementsAssignment_14_2");
					put(grammarAccess.getSlicerAccess().getSlicedElementsAssignment_15_2(), "rule__Slicer__SlicedElementsAssignment_15_2");
					put(grammarAccess.getSlicerAccess().getOnStartAssignment_16_2(), "rule__Slicer__OnStartAssignment_16_2");
					put(grammarAccess.getSlicerAccess().getOnEndAssignment_17_2(), "rule__Slicer__OnEndAssignment_17_2");
					put(grammarAccess.getSlicerAccess().getHelperAssignment_18_2(), "rule__Slicer__HelperAssignment_18_2");
					put(grammarAccess.getConstraintAccess().getNameAssignment_0(), "rule__Constraint__NameAssignment_0");
					put(grammarAccess.getConstraintAccess().getExpressionAssignment_2(), "rule__Constraint__ExpressionAssignment_2");
					put(grammarAccess.getRadiusAccess().getFocusedClassesAssignment_1_0(), "rule__Radius__FocusedClassesAssignment_1_0");
					put(grammarAccess.getRadiusAccess().getFocusedClassesAssignment_1_1_1(), "rule__Radius__FocusedClassesAssignment_1_1_1");
					put(grammarAccess.getSlicedClassAccess().getDomainAssignment_0(), "rule__SlicedClass__DomainAssignment_0");
					put(grammarAccess.getSlicedClassAccess().getIsOptionAssignment_1(), "rule__SlicedClass__IsOptionAssignment_1");
					put(grammarAccess.getSlicedClassAccess().getCtxAssignment_2(), "rule__SlicedClass__CtxAssignment_2");
					put(grammarAccess.getSlicedClassAccess().getExpressionAssignment_3_1(), "rule__SlicedClass__ExpressionAssignment_3_1");
					put(grammarAccess.getVarDeclAccess().getVarNameAssignment(), "rule__VarDecl__VarNameAssignment");
					put(grammarAccess.getSlicedPropertyAccess().getDomainAssignment_0(), "rule__SlicedProperty__DomainAssignment_0");
					put(grammarAccess.getSlicedPropertyAccess().getIsOptionAssignment_1(), "rule__SlicedProperty__IsOptionAssignment_1");
					put(grammarAccess.getSlicedPropertyAccess().getSrcAssignment_2(), "rule__SlicedProperty__SrcAssignment_2");
					put(grammarAccess.getSlicedPropertyAccess().getTgtAssignment_3(), "rule__SlicedProperty__TgtAssignment_3");
					put(grammarAccess.getSlicedPropertyAccess().getOppositeAssignment_4(), "rule__SlicedProperty__OppositeAssignment_4");
					put(grammarAccess.getSlicedPropertyAccess().getExpressionAssignment_5_1(), "rule__SlicedProperty__ExpressionAssignment_5_1");
					put(grammarAccess.getOppositeCreationAccess().getNameAssignment_3(), "rule__OppositeCreation__NameAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.inria.diverse.kompren.ui.contentassist.antlr.internal.InternalKomprenParser typedParser = (fr.inria.diverse.kompren.ui.contentassist.antlr.internal.InternalKomprenParser) parser;
			typedParser.entryRuleSlicer();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public KomprenGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(KomprenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
